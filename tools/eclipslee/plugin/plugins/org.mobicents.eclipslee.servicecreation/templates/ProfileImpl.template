__PACKAGE__

import javax.slee.CreateException;
import javax.slee.profile.Profile;
import javax.slee.profile.ProfileContext;
import javax.slee.profile.ProfileVerificationException;

/**
 * Profile implementation class.
 */
public abstract class __NAME__ProfileImpl implements Profile, __IMPLEMENTS__ {

    public __NAME__ProfileImpl() {
    }

    /**
     * Set the ProfileContext object for the Profile object.
     * The Profile object can take advantage of this method to allocate and
     * initialize state held by the Profile object during its lifetime.
     * 
     * @param context the ProfileContext object
     */
    public void setProfileContext(ProfileContext context) {
    }

    /**
     * Unset the ProfileContext object for the Profile object.
     * The Profile object can take advantage of this method to free any state
     * held by the Profile object. This state has typically been allocated by
     * the setProfileContext method.
     */
    public void unsetProfileContext() {
    }

    /**
     * The SLEE invokes this method on a Profile object in the Pooled state only
     * when the default Profile for a Profile Table is created, to initialize the
     * profile with its default values.
     */
    public void profileInitialize() {
    } 

    /**
     * The SLEE invokes this method on a Profile object in the Pooled state
     * when a new Profile is created, giving the Profile object a chance to
     * initialize additional transient state and acquire additional resources
     * that it needs while it is in the Ready state.
     * 
     * @throws CreateException when there is an application level problem
     */
    public void profilePostCreate() throws CreateException {
    }

    /**
     * The SLEE invokes this method on a Profile object in the Pooled state
     * when the SLEE reassigns the Profile object to an existing Profile, 
     * giving the Profile object a chance to initialize additional transient
     * state that it needs while it is in the Ready state.
     */
    public void profileActivate() {
    }

    /**
     * The SLEE invokes this method on a Profile object in the Ready state when
     * the SLEE needs to reclaim the Profile object, giving the Profile object
     * the chance to release any state or resources that should not be held
     * while the Profile object is in the Pooled state. This state has typically
     * had been allocated during the profileActivate method.
     */
    public void profilePassivate() {
    }

    /**
     * The SLEE invokes this method on a Profile object in the Ready state when
     * a Profile is removed.
     * This method can used to implement any actions that must be done before
     * the Profile’s persistent representation is removed.
     */
    public void profileRemove() {
    } 

    /**
     * The SLEE invokes this method on a Profile object in the Ready state when
     * the state of the Profile object needs to be synchronized with the state
     * in the underlying data source.
     * In general, any transient state that depends on the persistent state of
     * a Profile should be recalculated in this method.
     */
    public void profileLoad() {
    }

    /**
     * The SLEE invokes this method on a Profile object in the Ready state when
     * the state of the underlying data source needs to be synchronized with
     * the state of the Profile object.
     * This method should be used to update the Profile’s persistent state using
     * the CMP field accessor methods.
     */
    public void profileStore() {
    }

    /**
     * The SLEE invokes this method in response to a request made by the
     * Administrator via the JMX management interface to commit any changes
     * made to a Profile.
     * This method enables the Profile to reject changes made by the management
     * client where those changes are considered invalid.
     * 
     * @throws ProfileVerificationException if any CMP field contains an invalid value
     */
    public void profileVerify() throws ProfileVerificationException {
    }

}
